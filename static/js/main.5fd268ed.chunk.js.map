{"version":3,"sources":["assets/noPosterSmall.png","favicon.js","Components/Header.js","Components/Section.js","Components/Loader.js","Components/Message.js","Components/Poster.js","Routes/Home/HomePresenter.js","api.js","Routes/Home/index.js","Routes/Home/HomeContainer.js","Routes/TV/TVPresenter.js","Routes/TV/index.js","Routes/TV/TVContainer.js","Routes/Search/SearchPresenter.js","Routes/Search/index.js","Routes/Search/SearchContainer.js","Routes/Detail/DetailPresenter.js","Routes/Detail/index.js","Routes/Detail/DetailContainer.js","Components/Router.js","Components/Globalstyles.js","Components/App.js","index.js"],"names":["Favicon","useEffect","document","querySelector","href","Header","styled","header","List","ul","Item","li","props","current","SLink","Link","withRouter","pathname","location","to","Container","div","Title","span","Grid","Section","title","children","role","aria-label","Text","color","Message","text","Image","bgUrl","Rating","ImageContainer","Year","Poster","id","imageUrl","rating","year","isMovie","require","length","substring","HomePresenter","nowPlaying","upcoming","popular","error","loading","Helmet","rel","Loader","map","movie","poster_path","original_title","vote_average","release_date","api","axios","create","baseURL","params","api_key","language","movieApi","get","append_to_response","term","query","encodeURIComponent","tvApi","HomeContainer","state","data","results","this","setState","React","Component","TVPresenter","topRated","airingToday","show","original_name","first_air_date","TVContainer","Form","form","Input","input","SearchPresenter","movieResults","tvResults","searchTerm","handleSubmit","updateTerm","onSubmit","placeholder","value","onChange","SearchContainer","event","preventDefault","searchByTerm","target","a","Backdrop","bgImage","Content","Cover","Data","h1","ItemContainer","Divider","Overview","p","DetailPresenter","result","backdrop_path","runtime","episode_run_time","genres","genre","index","name","overview","DetailContainer","includes","match","push","history","parsedId","parseInt","isNaN","console","log","path","exact","component","Home","TV","render","Search","Detail","from","globalStyles","createGlobalStyle","reset","App","Router","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.5fd268ed.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/noPosterSmall.25a4e6b7.png\";","import { useEffect } from 'react';\n\nconst Favicon = () => {\n    useEffect(()=>{\n        const head = document.querySelector(\"head\");\n        const link = head.querySelector(\"link\")\n        link.href = \"https://www.flaticon.com/svg/vstatic/svg/4156/4156418.svg?token=exp=1614994660~hmac=e9aee3cbaa32f86e93b640367644ff5a\";\n    })\n};\n\nexport default Favicon;","import React from 'react';\nimport { Link, withRouter } from 'react-router-dom';\nimport styled from 'styled-components';\n\nconst Header = styled.header`\n    color: white;\n    position : fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 50px;\n    display: flex;\n    align-items: center;\n    padding: 0px 10px;\n    background-color: rgba(20,20,20,0.8);\n    z-index: 10;\n    box-shadow: 0px 1px 5px 2px rgba(0,0,0,0.8);\n`\n\nconst List = styled.ul`\n    display: flex;\n`\n\nconst Item = styled.li`\n    width: 50px;\n    height: 50px;\n    text-align: center;\n    border-bottom: 3px solid ${props => (props.current ? \"#3498db\" : \"transparent\")};\n    transition: border-bottom 0.7s ease-in-out;\n`;\n\nconst SLink = styled(Link)`\n    height: 50px;\n    display: flex;\n    align-items: center;  \n    justify-content: center;\n`;\n\nexport default withRouter(({ location: { pathname } }) => (\n    //console.log(props)\n    <Header>\n        <List>\n            <Item current={pathname === '/'}>\n                <SLink to='/'>Movies</SLink>\n            </Item>\n            <Item current={pathname === '/tv'}>\n                <SLink to='/tv'>TV</SLink>\n            </Item>\n            <Item current={pathname === '/search'}>\n                <SLink to='/search'>Search</SLink>\n            </Item>\n        </List>\n    </Header>\n));\n","import React from 'react';\nimport PropTypes from \"prop-types\";\nimport styled from 'styled-components'; \n\nconst Container = styled.div`\n    :not(:last-child) {\n        margin-bottom: 50px;\n    }\n`;\n\nconst Title = styled.span`\n    font-size: 16px;\n    font-weight: 600;\n`\n\nconst Grid = styled.div`\n    margin-top: 25px;\n    display: grid;\n    grid-template-columns: repeat(auto-fill, 125px);\n    grid-gap: 25px;\n`;\n\nconst Section = ({ title, children }) => (\n    <Container>\n        <Title>{title}</Title>\n        <Grid>{children}</Grid>\n    </Container>\n); \n\nSection.propTypes = {\n    title: PropTypes.string.isRequired,\n    children: PropTypes.oneOfType([\n        PropTypes.arrayOf(PropTypes.node),\n        PropTypes.node\n    ])\n};\n\nexport default Section;","import React from 'react';\nimport styled from 'styled-components';\n\nconst Container = styled.div`\n    height: 100vh;\n    width:100vw;\n    display:flex;\n    justify-content:center;\n    font-size: 28px;\n    margin-top: 20px;\n`\n\nexport default () => (\n    <Container>\n        <span role=\"img\" aria-label=\"Loading\">\n            ⏳\n        </span>\n    </Container>\n)","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nconst Container = styled.div`\n    width: 100vw;\n    display: flex;\n    justify-content: center;\n`;\n\nconst Text = styled.span`\n    color: ${props => props.color};\n    font-size: 20px;\n`;\n\nconst Message = ({text, color}) => (\n    <Container>\n        <Text color={color}>{text}</Text>\n    </Container>\n)\n\nMessage.propTypes = {\n    text: PropTypes.string.isRequired,\n    color: PropTypes.string.isRequired\n};\n\nexport default Message;","import React from 'react';\nimport PropTypes from 'prop-types'\nimport styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nconst Container = styled.div`\n    font-size:12px;\n`;\n\nconst Image = styled.div`\n    background-image: url(${props => props.bgUrl});\n    height: 180px;\n    background-size: cover;\n    border-radius: 4px;\n    background-position: center center;\n    transition: opacity 0.1s linear;\n`;\n\nconst Rating = styled.span`\n    position: absolute;\n    bottom: 5px;\n    right:5px;\n    opacity:0;\n`;\n\nconst ImageContainer = styled.div`\n    margin-bottom: 5px;\n    position: relative;\n    &:hover{\n        ${Image}{\n            opacity:0.3;\n        }\n        ${Rating}{\n            opacity:1;\n        }\n    }\n    \n`;\n\nconst Title = styled.span`\n    display: block;\n    margin-bottom: 3px;\n`;\n\nconst Year = styled.span`\n    font-size: 10px;\n    color: rgba(255, 255, 255, 0.5);\n`;\n\nconst Poster = ({ id, imageUrl, title, rating, year, isMovie = false }) => (\n    <Link to={isMovie ? `/movie/${id}` : `/show/${id}`}>\n        <Container>\n            <ImageContainer>\n                <Image bgUrl = {imageUrl ? `https://image.tmdb.org/t/p/w300/${imageUrl}` : require(\"../assets/noPosterSmall.png\")}/>\n                <Rating>\n                    <span role=\"img\" aria-label=\"rating\">\n                        ⭐️⭐️⭐️⭐️⭐️\n                    </span>{\" \"}\n                    {rating}/10\n                </Rating>\n            </ImageContainer>\n            <Title>{title.length > 15 ? `${title.substring(0,15)}...` : title}</Title>\n            <Year>{year}</Year>\n        </Container>\n    </Link>\n);\n\nPoster.propTypes = {\n    id: PropTypes.number.isRequired,\n    imageUrl: PropTypes.string,\n    title: PropTypes.string.isRequired,\n    rating: PropTypes.number,\n    year: PropTypes.string,\n    isMovie: PropTypes.bool\n}\n\nexport default Poster","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport Helmet from 'react-helmet';\n\nimport Section from \"Components/Section\";\nimport Loader from '../../Components/Loader'\nimport Message from 'Components/Message'\nimport Poster from 'Components/Poster'\n\nconst Container = styled.div`\n        padding: 20px;\n`;\n\nconst HomePresenter = ({nowPlaying, upcoming, popular, error, loading}) =>\n        <>\n                <Helmet>\n                        <link rel='icon' href=\"https://img.icons8.com/pastel-glyph/2x/movie-beginning.png\" />\n                        <title>Movie | MD</title>\n                </Helmet>\n                {loading ? (\n                        <Loader />\n                ) : (\n                        <Container>\n                                {nowPlaying && nowPlaying.length > 0 && (\n                                        <Section title=\"Now Playing\">\n                                                {nowPlaying.map(movie => (\n                                                <Poster \n                                                        key={movie.id}\n                                                        id={movie.id} \n                                                        imageUrl={movie.poster_path}\n                                                        title={movie.original_title} \n                                                        rating={movie.vote_average} \n                                                        year={movie.release_date && movie.release_date.substring(0,4)}\n                                                        isMovie={true} \n                                                />\n                                                ))}\n                                        </Section>\n                                )}\n                                {upcoming && upcoming.length > 0 && (\n                                        <Section title=\"Upcoming Movies\">\n                                                {upcoming.map(movie => (\n                                                <Poster \n                                                key={movie.id}\n                                                id={movie.id} \n                                                imageUrl={movie.poster_path}\n                                                title={movie.original_title} \n                                                rating={movie.vote_average} \n                                                year={movie.release_date && movie.release_date.substring(0,4)}\n                                                isMovie={true}\n                                        />\n                                        ))}\n                                        </Section>\n                                )}\n                                {popular && popular.length > 0 && (\n                                        <Section title=\"Popular Movies\">\n                                                {popular.map(movie => (\n                                                <Poster \n                                                key={movie.id}\n                                                id={movie.id} \n                                                imageUrl={movie.poster_path}\n                                                title={movie.original_title} \n                                                rating={movie.vote_average} \n                                                year={movie.release_date && movie.release_date.substring(0,4)}\n                                                isMovie={true}\n                                        />\n                                        ))}\n                                        </Section>\n                                )}\n                                {error && <Message text={error} color=\"#e74c3c\"/>}\n                        </Container>\n                )}\n        </>\n                                                        \n\nHomePresenter.propTypes = {\n        nowPlaying : PropTypes.array,\n        upcoming : PropTypes.array,\n        popular : PropTypes.array,\n        error : PropTypes.string,\n        loading : PropTypes.bool.isRequired  \n};\n\nexport default HomePresenter;","import axios from 'axios';\n\nconst api = axios.create({\n    baseURL: 'https://api.themoviedb.org/3/',\n    params: {\n        api_key: \"1f6fc0066c5b5060cc2577e302c34ea9\",\n        language:  \"en-US\"\n    }\n})\n\nexport const movieApi = {\n    nowPlaying: () => api.get('movie/now_playing'),\n    upcoming: () => api.get('movie/upcoming'),\n    popular: () => api.get('movie/popular'),\n    movieDetail: id => api.get(`movie/${id}`, {\n        params: {\n            append_to_response: 'videos'\n        }\n    }),\n    search: term => (\n        api.get(\"search/movie\", {\n            params: {\n                query: encodeURIComponent(term) \n            }\n        })\n    )\n};\n\nexport const tvApi = {\n    topRated: () => api.get('tv/top_rated'),\n    popular: () => api.get('tv/popular'),\n    airingToday: () => api.get('tv/airing_today'),\n    showDetail: id => api.get(`tv/${id}`, {\n        params: {\n            append_to_response: 'videos'\n        }\n    }),\n    search: term => (\n        api.get(\"search/tv\", {\n            params: {\n                query: encodeURIComponent(term)\n            }\n        })\n    )\n};","import HomeContainer from './HomeContainer';\n\nexport default HomeContainer;","import React from 'react';\nimport HomePresenter from './HomePresenter'\nimport { movieApi } from 'api';\n\nexport default class extends React.Component{\n    state = {\n        nowPlaying: null,\n        upcoming: null,\n        popular: null,\n        error: null,\n        loading: true\n    };\n\n    async componentDidMount(){\n        try{\n            const {\n                data: {results: nowPlaying}\n            } = await movieApi.nowPlaying();\n            const {\n                data: {results: upcoming}\n            } = await movieApi.upcoming();\n            const {\n                data: {results: popular}\n            } = await movieApi.popular();\n            \n            //자바스크립트에서 'nowPlaying: nowPlaying' 과 'nowPlaying'는 같은 의미\n            this.setState({\n                nowPlaying,\n                upcoming,\n                popular\n            })\n        } catch{\n            this.setState({\n                error: \"Can't find movie information.\"\n            });\n        } finally{\n            this.setState({\n                loading: false\n            });\n        }\n    }\n\n    render () {\n        const { nowPlaying, upcoming, popular, error, loading } = this.state;\n        return ( \n            <HomePresenter \n                nowPlaying={nowPlaying}\n                upcoming={upcoming}\n                popular={popular}\n                error={error}\n                loading={loading}\n            />\n        );\n    }\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport Helmet from 'react-helmet';\n\nimport Section from 'Components/Section';\nimport Loader from 'Components/Loader';\nimport Message from 'Components/Message';\nimport Poster from 'Components/Poster';\n\nconst Container = styled.div`\n        padding: 20px;\n`;\n\nconst TVPresenter = ({topRated, airingToday, popular, error, loading}) => \n        <>\n                <Helmet>\n                        <link rel='icon' href=\"https://img.icons8.com/pastel-glyph/2x/movie-beginning.png\" />\n                        <title>Movie | MD</title>\n                </Helmet>\n                {loading ? <Loader /> :  (\n                        <Container>\n                                {topRated && topRated.length > 0 && (\n                                        <Section title = \"Top Rated Shows\">\n                                                {topRated.map(show => (\n                                                        <Poster \n                                                        key={show.id}\n                                                        id={show.id} \n                                                        imageUrl={show.poster_path}\n                                                        title={show.original_name} \n                                                        rating={show.vote_average} \n                                                        year={show.first_air_date && show.first_air_date.substring(0,4)}\n                                                        isMovie={false} \n                                                />\n                                                ))}\n                                        </Section>\n                                )}{popular && popular.length > 0 && (\n                                        <Section title = \"Popular Shows\">\n                                                {popular.map(show => (\n                                                        <Poster \n                                                        key={show.id}\n                                                        id={show.id} \n                                                        imageUrl={show.poster_path}\n                                                        title={show.original_name} \n                                                        rating={show.vote_average} \n                                                        year={show.first_air_date && show.first_air_date.substring(0,4)}\n                                                        isMovie={false} \n                                                />\n                                                ))}\n                                        </Section>\n                                )}{airingToday && airingToday.length > 0 && (\n                                        <Section title = \"Airing Today\">\n                                                {airingToday.map(show => (\n                                                        <Poster \n                                                        key={show.id}\n                                                        id={show.id} \n                                                        imageUrl={show.poster_path}\n                                                        title={show.original_name} \n                                                        rating={show.vote_average} \n                                                        year={show.first_air_date && show.first_air_date.substring(0,4)}\n                                                        isMovie={false} \n                                                />\n                                                ))}\n                                        </Section>\n                                )}\n                                {error && <Message text={error} color=\"#e74c3c\"/>}\n                        </Container>\n                )}\n        </>\n\nTVPresenter.propTypes = {\n        topRated: PropTypes.array,\n        airingToday: PropTypes.array,\n        popular: PropTypes.array,\n        error: PropTypes.string,\n        loading: PropTypes.bool.isRequired  \n}\n\nexport default TVPresenter;","import TVContainer from './TVContainer';\n\nexport default TVContainer;","import React from 'react';\nimport TVPresenter from './TVPresenter'\nimport { tvApi } from 'api'\n\nexport default class extends React.Component{\n    state = {\n        topRated: null,\n        airingToday: null,\n        popular: null,\n        error: null,\n        loading: true\n    }\n\n    async componentDidMount(){\n        try{\n            const { \n                data: {results: topRated}\n            } = await tvApi.topRated()\n            const { \n                data: {results: airingToday}\n            } = await tvApi.airingToday()\n            const { \n                data: {results: popular}\n            } = await tvApi.popular()\n\n            this.setState({\n                topRated,\n                airingToday,\n                popular\n            });\n        } catch {\n            this.setState({\n                error: \"Can't find TV information.\"\n            });\n        } finally {\n            this.setState({\n                loading: false\n            });\n        }\n    }\n\n    render () {\n        const { topRated, airingToday, popular, error, loading } = this.state;\n        return ( \n            <TVPresenter \n                topRated={topRated}\n                airingToday={airingToday}\n                popular={popular}\n                error={error}\n                loading={loading}\n            />\n        )\n    }\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport Helmet from 'react-helmet';\n\nimport Loader from 'Components/Loader';\nimport Section from 'Components/Section';\nimport Message from 'Components/Message'\nimport Poster from 'Components/Poster'\n\nconst Container = styled.div`\n        padding: 20px;\n`;\n\nconst Form = styled.form`\n        margin-bottom: 50px;\n        width: 100%;\n`;\n\nconst Input = styled.input`\n        all: unset; \n        font-size: 28px;\n        width: 100%;\n`;\n\nconst SearchPresenter = ({\n        movieResults, \n        tvResults, \n        searchTerm, \n        error, \n        handleSubmit,\n        updateTerm,\n        loading\n}) => ( \n                <Container>\n                        <Helmet>\n                                <link rel='icon' href=\"https://img.icons8.com/pastel-glyph/2x/movie-beginning.png\" />\n                                <title>Search | MD</title>\n                        </Helmet>\n                        <Form onSubmit={handleSubmit}>\n                                <Input \n                                        placeholder=\"Search Movies or TV shows...\" \n                                        value={searchTerm} \n                                        onChange={updateTerm}\n                                />\n                        </Form>\n                        {loading ? <Loader /> : (\n                                <>\n                                        {movieResults && movieResults.length > 0 && (\n                                                <Section title=\"Movie Results\">\n                                                        {movieResults.map(movie => (\n                                                        <Poster \n                                                                key={movie.id}\n                                                                id={movie.id} \n                                                                imageUrl={movie.poster_path}\n                                                                title={movie.original_title} \n                                                                rating={movie.vote_average} \n                                                                year={movie.release_date && movie.release_date.substring(0,4)}\n                                                                isMovie={true} \n                                                        />\n                                                        ))}\n                                                </Section>\n                                        )}\n                                        {tvResults && tvResults.length > 0 && (\n                                                <Section title=\"TV Show Results\">\n                                                        {tvResults.map(show => (\n                                                                <Poster \n                                                                key={show.id}\n                                                                id={show.id} \n                                                                imageUrl={show.poster_path}\n                                                                title={show.original_name} \n                                                                rating={show.vote_average} \n                                                                year={show.first_air_date && show.first_air_date.substring(0,4)}\n                                                                isMovie={false} \n                                                        />\n                                                        ))}\n                                                </Section>\n                                        )}\n                                </>\n                        )}\n                        {error && <Message text={error} color={\"#e74c3c\"}/>}\n                        {tvResults && movieResults && tvResults.length === 0 && movieResults.length === 0 && <Message text=\"Nothing found\" color=\"#95a5a6\"/>}\n                </Container>\n);\n\nSearchPresenter.propTypes = {\n        movieResults: PropTypes.array,\n        tvResults: PropTypes.array,\n        searchTerm: PropTypes.string,\n        error: PropTypes.string,\n        loading: PropTypes.bool.isRequired,\n        handleSubmit: PropTypes.func.isRequired,\n        updateTerm: PropTypes.func.isRequired\n}\n\nexport default SearchPresenter;","import SearchContainer from './SearchContainer';\n\nexport default SearchContainer;","import { movieApi, tvApi } from 'api';\nimport React from 'react';\nimport SearchPresenter from './SearchPresenter'\n\nexport default class extends React.Component{\n    state = {\n        movieResults: null,\n        tvResults: null,\n        searchTerm: \"\",\n        error: null,\n        loading: false\n    }\n\n    handleSubmit = event => {\n        event.preventDefault();\n        const { searchTerm } = this.state;\n        if(searchTerm !== \"\"){\n            this.searchByTerm();\n        }\n    };\n\n    updateTerm = (event) => {\n        const { target:{value} } = event;\n        this.setState({\n            searchTerm: value\n        })\n    }\n\n    searchByTerm = async () => {\n        const { searchTerm } = this.state;\n        this.setState({ loading: true });\n        try {\n            const {\n                data: { results: movieResults }\n             } = await movieApi.search(searchTerm);\n            const {\n                data: { results: tvResults }\n             }  = await tvApi.search(searchTerm);\n            this.setState({ \n                movieResults, \n                tvResults \n            });\n        } catch {\n            this.setState({ error: \"Can't find results.\"});\n        } finally {\n            this.setState({ loading: false });\n        }\n    };\n\n    render () {\n        const { movieResults, tvResults, searchTerm, error, loading} = this.state;\n        return ( \n            <SearchPresenter\n                movieResults = {movieResults}\n                tvResults = {tvResults}\n                searchTerm = {searchTerm}\n                error = {error}\n                loading = {loading}\n                handleSubmit = {this.handleSubmit}\n                updateTerm = {this.updateTerm}\n            />\n        )\n    }\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport Helmet from 'react-helmet';\nimport Loader from 'Components/Loader';\n\nconst Container = styled.div`\n        height: calc(100vh - 50px);\n        width: 100%;\n        position: relative;\n        padding: 50px;\n`\n\nconst Backdrop = styled.div`\n        position: absolute;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n        background-image: url(${props => props.bgImage});\n        background-position: center center;\n        background-size: cover;\n        filter: blur(3px);\n        opacity:0.5;\n        z-index: 0;\n`\n\nconst Content = styled.div`\n        display: flex;\n        width: 100%;\n        height: 100%;\n        position: relative;\n        z-index: 1;\n`;\n\nconst Cover = styled.div`\n        width: 30%;\n        height: 100%;\n        background-image: url(${props => props.bgImage});\n        background-position: center center;\n        background-size: cover;\n        border-radius: 5px;\n\n`;\n\nconst Data = styled.div`\n        width: 70%;\n        margin-left: 30px;\n`;\n\nconst Title = styled.h1`\n        font-size: 32px; \n`;\n\nconst ItemContainer = styled.div`\n        margin: 20px 0 ;\n`;\n\nconst Item = styled.span``;\n\nconst Divider = styled.span`\n        margin: 0 10px;\n`;\n\nconst Overview = styled.p`\n        font-size: 12px;\n        opacity: 0.7;\n        line-height: 1.5;\n        width: 70%;\n`;\n\nconst DetailPresenter = ({result, error, loading}) => (\n        loading ? (\n                <>\n                        <Helmet>\n                                <title>Loading | MD</title>\n                        </Helmet>\n                        <Loader />\n                </>\n        ) : (\n        <Container> \n                <Helmet>\n                        <link rel='icon' href=\"https://img.icons8.com/pastel-glyph/2x/movie-beginning.png\" />\n                        <title>\n                                {result.original_title \n                                ? result.original_title \n                                : result.original_name }\n                        </title>\n                </Helmet>\n                <Backdrop \n                        bgImage={`https://image.tmdb.org/t/p/original${result.backdrop_path}`} \n                />\n                <Content>\n                        <Cover \n                                bgImage={\n                                        result.poster_path \n                                        ? `https://image.tmdb.org/t/p/original${result.poster_path}`\n                                        : require(\"assets/noPosterSmall.png\")\n                                } \n                        />\n                        <Data>\n                                <Title>\n                                        {result.original_title \n                                        ? result.original_title \n                                        : result.original_name }\n                                </Title>\n                                <ItemContainer>\n                                                <Item>\n                                                        {result.release_date \n                                                        ? result.release_date.substring(0,4)\n                                                         : result.first_air_date.substring(0,4) }\n                                                </Item>\n                                                <Divider>•</Divider>\n                                                <Item>\n                                                        {result.runtime\n                                                        ? result.runtime\n                                                        : result.episode_run_time[0]} min\n                                                </Item>\n                                                <Divider>•</Divider>\n                                                <Item>\n                                                        {result.genres && result.genres.map((genre, index) => index === result.genres.length -1 ? genre.name : `${genre.name}/`)}\n                                                </Item>\n                                </ItemContainer>\n                                <Overview>\n                                        {result.overview}\n                                </Overview>\n                        </Data>\n                </Content> \n        </Container>\n        )\n)\n\nDetailPresenter.propTypes = {\n        result:PropTypes.array,\n        error:PropTypes.string, \n        loading:PropTypes.bool.isRequired  \n}\n\nexport default DetailPresenter;","import DetailContainer from './DetailContainer';\n\nexport default DetailContainer;","import { movieApi, tvApi } from 'api';\nimport React from 'react';\nimport DetailPresenter from './DetailPresenter'\n\n\nexport default class extends React.Component{\n    constructor(props){\n        super(props);\n        const {location: { pathname }} = props;\n        this.state = {\n            result: null,\n            error: null,\n            loading: true,\n            isMovie: pathname.includes(\"/movie/\")\n        };\n    }\n    \n    async componentDidMount(){\n        const {\n            match: {\n                params: { id }\n            },\n            history: { push }\n        } = this.props;\n        const { isMovie } = this.state;\n        const parsedId = parseInt(id);\n        if(isNaN(parsedId)){\n            return push(\"/\");\n        }\n        let result = null;\n        try{\n            if(isMovie){\n                ({ data: result } = await movieApi.movieDetail(parsedId));\n            } else {\n                ({ data: result } = await tvApi.showDetail(parsedId));\n            }\n            console.log(result)\n        } catch {\n            this.setState({ error: \"Can't find anything.\" });\n        } finally {\n            this.setState({ loading: false, result });\n        }\n    }\n    \n    render () {\n        const { result, error, loading } = this.state;\n        return ( \n            <DetailPresenter \n                result={result}\n                error={error}\n                loading={loading}\n            />\n        );\n    }\n}","import React from 'react';\nimport { BrowserRouter as Router, Route, Redirect, Switch } from 'react-router-dom';\nimport Header from 'Components/Header'\nimport Home from 'Routes/Home';\nimport TV from 'Routes/TV';\nimport Search from 'Routes/Search';\nimport Detail from 'Routes/Detail';\n\nexport default () => (\n    //Router 안에서만 Route할 수 있다.\n    <Router>\n        <>\n            <Header />\n            {/* Switch : Redirect시 오직 하나의 Route만 render할 수 있게 해준다. */}\n            <Switch>\n                <Route path=\"/\" exact component={Home} />\n                <Route path=\"/tv\" exact component={TV} />\n                <Route path=\"/tv/popular\" exact render={() => <h1>Popular</h1>} />\n                <Route path=\"/search\" exact component={Search} />\n                <Route path=\"/movie/:id\" exact component={Detail} />\n                <Route path=\"/show/:id\" exact component={Detail} />\n                <Redirect from=\"*\" to=\"/\" />\n            </Switch> \n        </>\n    </Router>\n)","import { createGlobalStyle } from 'styled-components';\nimport reset from 'styled-reset';\n\nconst globalStyles = createGlobalStyle`\n    ${reset};\n    a{\n        text-decoration:none;\n        color:inherit;\n    }\n    *{\n        box-sizing: border-box;\n    }\n    body{\n        font-family:--apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\n        font-size: 12px;\n        background-color:rgba(20,20,20,1);\n        color: white;\n        padding-top: 50px;\n    }\n`\nexport default globalStyles;","import React from 'react'\nimport Favicon from \"../favicon\";\nimport Router from 'Components/Router'\nimport GlobalStyles from 'Components/Globalstyles'\n\n\nfunction App() {\n  Favicon()\n  return (\n    <>\n      <Router />\n      <GlobalStyles />  \n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// './Components/App' 대신 'Components/App'를 써도 된다.\n// jsconfig.json파일 때문에 기본적으로 scr에서 폴더를 찾게 하기 때문.\nimport App from 'Components/App';\n// import reportWebVitals from './reportWebVitals';\nimport './api';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n// reportWebVitals();\n "],"sourceRoot":""}